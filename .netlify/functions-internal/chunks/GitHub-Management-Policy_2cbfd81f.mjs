import { f as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_c5329516.mjs';
import 'clsx';

const html = "<h2 id=\"github-management-policy\">GitHub Management Policy</h2>\n<p>This document provides instructions on how to use GitHub as a Thoth Tech team member.</p>\n<p>As a team member who wants to contribute to your team’s project, the following steps should be\nfollowed to get your code or markdown document published to the main branch of your products\nrepository.</p>\n<h2 id=\"step-1-fork-the-main-branch-of-your-products-repository\">Step 1: Fork the Main Branch of your Products Repository</h2>\n<ol>\n<li>\n<p>Navigate to the repository that you want to fork and locate Fork on the top right corner of the\npage.</p>\n<p><img src=\"/git-tut-1.png\" alt=\"git tut\"></p>\n</li>\n<li>\n<p>Click on Fork and you would be required to Choose an owner. This is usually your personal GitHub\naccount, add a description if you wish and Create Fork.</p>\n<p><img src=\"/git-tut-2.png\" alt=\"git tut\"></p>\n</li>\n<li>\n<p>Once the Fork is completed, you should now see it as a repository in your personal GitHub account\nor whatever account you chose as the owner.</p>\n</li>\n<li>\n<p>While on the Forked repo, clone it and perform the updates you wish to.</p>\n</li>\n</ol>\n<h3 id=\"i-forked-from-the-wrong-repo-how-do-i-change-it\">I forked from the wrong repo; how do I change it?</h3>\n<p>If you forked from the wrong repo and you haven’t made any commits, then the easiest option is to\nstart over. If you have made commits you will need to change the fork location like this…</p>\n<ol>\n<li>\n<p>Fork the correct repo (the Thoth Tech one) via the GitHub web interface</p>\n</li>\n<li>\n<p>Navigate to the your local repo’s root directory in terminal</p>\n</li>\n<li>\n<p>Rename your origin to upstream</p>\n<p>git remote rename origin upstream</p>\n</li>\n<li>\n<p>Add the new fork as the origin</p>\n<p>git remote add origin <a href=\"git@github.com\">git@github.com</a>/[GITHUB_USERNAME]/[YOUR_NEW_FORK_NAME]</p>\n</li>\n<li>\n<p>Fetch from new origin</p>\n<p>git fetch origin</p>\n</li>\n<li>\n<p>Set origin master</p>\n<p>git branch —set-upstream-to origin/master master</p>\n</li>\n<li>\n<p>Push to fork</p>\n<p>git push origin</p>\n</li>\n</ol>\n<p>… Done!</p>\n<p>Your changes should now be going to the right place.</p>\n<h2 id=\"step-2-install-prettier-vale-and-markdown-lint-on-vs-code\">Step 2: Install Prettier, Vale, and Markdown Lint on VS Code</h2>\n<p>After you have forked the repository and cloned it to begin work on your local system via VS Code,\nyou would need to set up the required spell checkers and code formatters to ensure compatibility\nduring code build. To achieve this, do the following.</p>\n<ol>\n<li>\n<p>Locate and Click the Extensions icon on the navigation bar (usually located at the left side of\nyour screen). <img src=\"/git-tut-3.png\" alt=\"git tut\"></p>\n</li>\n<li>\n<p>Search for Prettier and follow the prompts to install it.</p>\n<p><img src=\"/git-tut-4.png\" alt=\"git tut\"></p>\n</li>\n<li>\n<p>Follow the same process to search for and install Vale and Markdownlint.</p>\n</li>\n<li>\n<p>Navigate back to your terminal. To ensure that all the required modules is available on the copy\nof the cloned repo, run “npm install” on the terminal.</p>\n</li>\n<li>\n<p>To configure Prettier, run “npm install prettier.”</p>\n</li>\n<li>\n<p>To ensure the document is well formatted after creation, right click on your document and select\n“Format Document with”, then select “markdownlint”, then right click the document again and\nFormat Document with “Prettier.”</p>\n</li>\n</ol>\n<h2 id=\"step-3-format-your-code\">Step 3: Format your Code</h2>\n<p>For a markdown document, the tools installed above would be used for this purpose. Once you are done\nwriting your document, follow these steps to prevent a failed check in GitHub.</p>\n<ol>\n<li>On your document, right click and select “Format document with” and select markdwonlint.</li>\n<li>Then right click again, select “Format document with” and select Prettier.</li>\n<li>On your terminal run npm run format<div></div>.</li>\n</ol>\n<h2 id=\"step-4-create-a-commit\">Step 4: Create a Commit</h2>\n<ul>\n<li>\n<p>On VS Code, locate the commit icon on the left navigation bar, type in a Commit message (you can\nadopt <a href=\"https://cbea.ms/git-commit/\">Chris beam’s guide</a> to create a good commit message), and\ncommit the changes.</p>\n<p>![git tut]/Starlight-Documentation-Website(/git-tut-5.png)</p>\n</li>\n</ul>\n<h2 id=\"step-5-create-a-pull-request\">Step 5: Create a Pull Request</h2>\n<ol>\n<li>\n<p>On GitHub, navigate to the main page of the repository.</p>\n</li>\n<li>\n<p>In the “Branch” menu, choose the branch that contains your commits.</p>\n</li>\n<li>\n<p>Above the list of files, in the yellow banner, click Compare &#x26; pull request to create a pull\nrequest for the associated branch.</p>\n</li>\n<li>\n<p>Use the base branch dropdown menu to select the branch you’d like to merge your changes into,\nthen use the compare branch drop-down menu to choose the topic branch you made your changes in.</p>\n<p><img src=\"/git-tut-6.png\" alt=\"git tut\"></p>\n</li>\n<li>\n<p>Type a title and description for your pull request.</p>\n</li>\n<li>\n<p>To create a pull request that is ready for review, click Create Pull Request. To create a draft\npull request, use the drop-down and select Create Draft Pull Request, then click Draft Pull\nRequest.</p>\n</li>\n<li>\n<p>After your pull request has been reviewed and approved, it can be merged into the repository.</p>\n</li>\n</ol>\n<h2 id=\"code-review-guidelines\">Code Review Guidelines</h2>\n<p>You are strongly encouraged to get your code reviewed by a reviewer as soon as there is any code to\nreview, to get a second opinion on the chosen solution and implementation, and an extra pair of eyes\nlooking for bugs, logic problems, or uncovered edge cases.</p>\n<h3 id=\"draft-pull-request\">Draft Pull Request</h3>\n<p>Draft Pull Requests allow a work in progress to receive early feedback. The developer creating the\nPR should, in the description, indicate their progress and any particular aspect they are looking\nfor feedback on. When the PR is ready for final review, the developer should update the description,\nre-request reviews as required and change the status to “ready to review”.</p>\n<p>Pull requests (draft and otherwise) are created from the GitHub website.</p>\n<h3 id=\"required-approvals\">Required Approvals</h3>\n<p>Pull requests require <strong>a minimum of two approvals</strong>. The default approach is to choose a reviewer\nfrom your team for the first review. However, the reviewer may be from different team, for example a\ndomain expert in a programming language, quality assurance process, telemetry or documentation.\nDepending on the team size and dynamics, the number of required approvals can be higher or lower.</p>\n<h2 id=\"collaborate-on-an-existing-branch\">Collaborate on an existing branch</h2>\n<p>Ideally, we should avoid having developers working on the same code. It creates merge conflicts and\nhinders efficiency. If possible, try to break it down into small tasks so developers can work\nindependently. In the worst-case scenario, if there is more than 1 person working on a feature\nbranch:</p>\n<ol>\n<li>\n<p>Please make sure you pull changes in the remote branch before starting your work.</p>\n<p>git pull origin feature/<em>remote branch name</em></p>\n</li>\n<li>\n<p>Resolve any merge conflicts that may now be revealed. <strong>Please avoid force-push and rebase when\nworking on a shared branch</strong>. It can cause complex and hard to resolve merge conflicts as wellas\nundo others’ commits accidentally.</p>\n</li>\n</ol>";

				const frontmatter = {"title":"GitHub Management Policy"};
				const file = "C:/Users/Danma/OneDrive/Desktop/Deakin-Work/Github Work/Capstone-Documentation-Website-Template/src/content/docs/policies/GitHub-Management-Policy.md";
				const url = undefined;
				function rawContent() {
					return "\n## GitHub Management Policy\n\nThis document provides instructions on how to use GitHub as a Thoth Tech team member.\n\nAs a team member who wants to contribute to your team’s project, the following steps should be\nfollowed to get your code or markdown document published to the main branch of your products\nrepository.\n\n## Step 1: Fork the Main Branch of your Products Repository\n\n1. Navigate to the repository that you want to fork and locate Fork on the top right corner of the\n   page.\n\n   ![git tut](/git-tut-1.png)\n\n2. Click on Fork and you would be required to Choose an owner. This is usually your personal GitHub\n   account, add a description if you wish and Create Fork.\n\n   ![git tut](/git-tut-2.png)\n\n3. Once the Fork is completed, you should now see it as a repository in your personal GitHub account\n   or whatever account you chose as the owner.\n4. While on the Forked repo, clone it and perform the updates you wish to.\n\n### I forked from the wrong repo; how do I change it?\n\nIf you forked from the wrong repo and you haven’t made any commits, then the easiest option is to\nstart over. If you have made commits you will need to change the fork location like this...\n\n1. Fork the correct repo (the Thoth Tech one) via the GitHub web interface\n\n2. Navigate to the your local repo's root directory in terminal\n\n3. Rename your origin to upstream\n\n   git remote rename origin upstream\n\n4. Add the new fork as the origin\n\n   git remote add origin [git@github.com](git@github.com)/[GITHUB_USERNAME]/[YOUR_NEW_FORK_NAME]\n\n5. Fetch from new origin\n\n   git fetch origin\n\n6. Set origin master\n\n   git branch --set-upstream-to origin/master master\n\n7. Push to fork\n\n   git push origin\n\n... Done!\n\nYour changes should now be going to the right place.\n\n## Step 2: Install Prettier, Vale, and Markdown Lint on VS Code\n\nAfter you have forked the repository and cloned it to begin work on your local system via VS Code,\nyou would need to set up the required spell checkers and code formatters to ensure compatibility\nduring code build. To achieve this, do the following.\n\n1. Locate and Click the Extensions icon on the navigation bar (usually located at the left side of\n   your screen). ![git tut](/git-tut-3.png)\n\n2. Search for Prettier and follow the prompts to install it.\n\n   ![git tut](/git-tut-4.png)\n\n3. Follow the same process to search for and install Vale and Markdownlint.\n4. Navigate back to your terminal. To ensure that all the required modules is available on the copy\n   of the cloned repo, run \"npm install\" on the terminal.\n5. To configure Prettier, run \"npm install prettier.\"\n6. To ensure the document is well formatted after creation, right click on your document and select\n   \"Format Document with\", then select \"markdownlint\", then right click the document again and\n   Format Document with \"Prettier.\"\n\n## Step 3: Format your Code\n\nFor a markdown document, the tools installed above would be used for this purpose. Once you are done\nwriting your document, follow these steps to prevent a failed check in GitHub.\n\n1. On your document, right click and select “Format document with” and select markdwonlint.\n2. Then right click again, select “Format document with” and select Prettier.\n3. On your terminal run npm run format:check.\n\n## Step 4: Create a Commit\n\n- On VS Code, locate the commit icon on the left navigation bar, type in a Commit message (you can\n  adopt [Chris beam’s guide](https://cbea.ms/git-commit/) to create a good commit message), and\n  commit the changes.\n\n  ![git tut]/Starlight-Documentation-Website(/git-tut-5.png)\n\n## Step 5: Create a Pull Request\n\n1. On GitHub, navigate to the main page of the repository.\n2. In the \"Branch\" menu, choose the branch that contains your commits.\n3. Above the list of files, in the yellow banner, click Compare & pull request to create a pull\n   request for the associated branch.\n4. Use the base branch dropdown menu to select the branch you'd like to merge your changes into,\n   then use the compare branch drop-down menu to choose the topic branch you made your changes in.\n\n   ![git tut](/git-tut-6.png)\n\n5. Type a title and description for your pull request.\n6. To create a pull request that is ready for review, click Create Pull Request. To create a draft\n   pull request, use the drop-down and select Create Draft Pull Request, then click Draft Pull\n   Request.\n7. After your pull request has been reviewed and approved, it can be merged into the repository.\n\n## Code Review Guidelines\n\nYou are strongly encouraged to get your code reviewed by a reviewer as soon as there is any code to\nreview, to get a second opinion on the chosen solution and implementation, and an extra pair of eyes\nlooking for bugs, logic problems, or uncovered edge cases.\n\n### Draft Pull Request\n\nDraft Pull Requests allow a work in progress to receive early feedback. The developer creating the\nPR should, in the description, indicate their progress and any particular aspect they are looking\nfor feedback on. When the PR is ready for final review, the developer should update the description,\nre-request reviews as required and change the status to \"ready to review\".\n\nPull requests (draft and otherwise) are created from the GitHub website.\n\n### Required Approvals\n\nPull requests require **a minimum of two approvals**. The default approach is to choose a reviewer\nfrom your team for the first review. However, the reviewer may be from different team, for example a\ndomain expert in a programming language, quality assurance process, telemetry or documentation.\nDepending on the team size and dynamics, the number of required approvals can be higher or lower.\n\n## Collaborate on an existing branch\n\nIdeally, we should avoid having developers working on the same code. It creates merge conflicts and\nhinders efficiency. If possible, try to break it down into small tasks so developers can work\nindependently. In the worst-case scenario, if there is more than 1 person working on a feature\nbranch:\n\n1. Please make sure you pull changes in the remote branch before starting your work.\n\n   git pull origin feature/_remote branch name_\n\n2. Resolve any merge conflicts that may now be revealed. **Please avoid force-push and rebase when\n   working on a shared branch**. It can cause complex and hard to resolve merge conflicts as wellas\n   undo others' commits accidentally.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"github-management-policy","text":"GitHub Management Policy"},{"depth":2,"slug":"step-1-fork-the-main-branch-of-your-products-repository","text":"Step 1: Fork the Main Branch of your Products Repository"},{"depth":3,"slug":"i-forked-from-the-wrong-repo-how-do-i-change-it","text":"I forked from the wrong repo; how do I change it?"},{"depth":2,"slug":"step-2-install-prettier-vale-and-markdown-lint-on-vs-code","text":"Step 2: Install Prettier, Vale, and Markdown Lint on VS Code"},{"depth":2,"slug":"step-3-format-your-code","text":"Step 3: Format your Code"},{"depth":2,"slug":"step-4-create-a-commit","text":"Step 4: Create a Commit"},{"depth":2,"slug":"step-5-create-a-pull-request","text":"Step 5: Create a Pull Request"},{"depth":2,"slug":"code-review-guidelines","text":"Code Review Guidelines"},{"depth":3,"slug":"draft-pull-request","text":"Draft Pull Request"},{"depth":3,"slug":"required-approvals","text":"Required Approvals"},{"depth":2,"slug":"collaborate-on-an-existing-branch","text":"Collaborate on an existing branch"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
