import { f as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_c5329516.mjs';
import 'clsx';

const html = "<p>I have reviewed two reports on the Lighthouse scores and identified the issues that needed to be\nrectified. One report was a review on the desktop app and the other was a review on the mobile app.\nBoth had many errors so, I had to analyse both reports and did some research on finding\nrecommendations and solutions for the issue identified.</p>\n<h2 id=\"desktop-app\">Desktop App</h2>\n<p>For the desktop app, here are the problems/recommendations I have identified from the report:</p>\n<ul>\n<li>Properly size images (add explicit width &#x26; height for images)</li>\n<li>Work on reducing network payloads</li>\n<li>Serve static assets with efficient cache policy</li>\n<li>Optimise the Largest Contentful Paint (make it faster):\n<ul>\n<li>Eliminate resource load delay</li>\n<li>Eliminate element render delay</li>\n<li>Reduce resource load time</li>\n<li>Reduce time to first byte</li>\n</ul>\n</li>\n<li>Reduce the impact of third-party code (identify slow third-party JavaScript)</li>\n<li>Reduce JavaScript execution time:\n<ul>\n<li>Remove unused code</li>\n<li>Minify and compress code</li>\n<li>Implement code splitting</li>\n<li>Cache code with PRPL pattern</li>\n</ul>\n</li>\n<li>Minimise main thread work:\n<ul>\n<li>Evaluate the script (debounce input handlers, use web workers)</li>\n<li>Check style layout (reduce complexity of style calculations, avoid large, complex layouts).</li>\n<li>Rendering (manage layer count, simplify paint complexity, and reduce paint areas)</li>\n<li>Parse HTML and CSS (extract critical CSS, minify CSS, defer non-critical CSS)</li>\n</ul>\n</li>\n<li>Reduce resource counts and transfer sizes (CSS &#x26; JavaScript, Images, Fonts, Documents, Media)</li>\n<li>Minify JavaScript</li>\n<li>Improve page loading speed:\n<ul>\n<li>Using Preconnect to required origins</li>\n<li>Preload key requests</li>\n</ul>\n</li>\n<li>Minimise critical request depth:\n<ul>\n<li>Minimise number of critical resources (eliminate them, defer their download, etc)</li>\n<li>Optimize the number of critical bytes and reduce the download time</li>\n<li>Optimize the order for the remaining resources to be loaded (download all critical assets early\nto shorten critical path length)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mobile-app\">Mobile App</h2>\n<p>For the mobile app, here are the problems/recommendations I have identified from the report:</p>\n<ul>\n<li>Properly size images (add explicit width &#x26; height for images)</li>\n<li>Work on reducing network payloads</li>\n<li>Serve static assets with efficient cache policy</li>\n<li>Optimise the Largest Contentful Paint (make it faster):\n<ul>\n<li>Eliminate resource load delay</li>\n<li>Eliminate element render delay</li>\n<li>Reduce resource load time</li>\n<li>Reduce time to first byte</li>\n</ul>\n</li>\n<li>Improve mobile friendliness (appropriately size tap targets)</li>\n<li>Reduce the impact of third-party code (identify slow third-party JavaScript)</li>\n<li>Reduce JavaScript execution time:\n<ul>\n<li>Remove unused code</li>\n<li>Minify and compress code</li>\n<li>Implement code splitting</li>\n<li>Cache code with PRPL pattern</li>\n</ul>\n</li>\n<li>Minimise main thread work:\n<ul>\n<li>Evaluate the script (debounce input handlers, use web workers)</li>\n<li>Check style layout (reduce complexity of style calculations, avoid large, complex layouts).</li>\n<li>Rendering (manage layer count, simplify paint complexity, and reduce paint areas)</li>\n<li>Parse HTML and CSS (extract critical CSS, minify CSS, defer non-critical CSS)</li>\n</ul>\n</li>\n<li>Reduce resource counts and transfer sizes (CSS &#x26; JavaScript, Images, Fonts, Documents, Media)</li>\n<li>Minify JavaScript</li>\n<li>Improve page loading speed:\n<ul>\n<li>Using Preconnect to required origins</li>\n<li>Preload key requests</li>\n</ul>\n</li>\n<li>Minimise critical request depth:\n<ul>\n<li>Minimise number of critical resources (eliminate them, defer their download, etc)</li>\n<li>Optimize the number of critical bytes and reduce the download time</li>\n<li>Optimize the order for the remaining resources to be loaded (download all critical assets early\nto shorten critical path length)</li>\n</ul>\n</li>\n<li>Shorten main-thread tasks</li>\n<li>Check and use discernible name for links</li>\n<li>Add meta description to document</li>\n</ul>\n<p>I have added cards and allocated story points for each of these problems and recommendations into\nthe Trello board under the ‘Lighthouse Project Implementation’ section.</p>";

				const frontmatter = {"title":"Review Research from T1"};
				const file = "C:/Users/Danma/OneDrive/Desktop/Deakin-Work/Github Work/Capstone-Documentation-Website-Template/src/content/docs/products/art-gallery/Projects/Lighthouse/LighthouseReviewReport.md";
				const url = undefined;
				function rawContent() {
					return "\nI have reviewed two reports on the Lighthouse scores and identified the issues that needed to be\nrectified. One report was a review on the desktop app and the other was a review on the mobile app.\nBoth had many errors so, I had to analyse both reports and did some research on finding\nrecommendations and solutions for the issue identified.\n\n## Desktop App\n\nFor the desktop app, here are the problems/recommendations I have identified from the report:\n\n- Properly size images (add explicit width & height for images)\n- Work on reducing network payloads\n- Serve static assets with efficient cache policy\n- Optimise the Largest Contentful Paint (make it faster):\n  - Eliminate resource load delay\n  - Eliminate element render delay\n  - Reduce resource load time\n  - Reduce time to first byte\n- Reduce the impact of third-party code (identify slow third-party JavaScript)\n- Reduce JavaScript execution time:\n  - Remove unused code\n  - Minify and compress code\n  - Implement code splitting\n  - Cache code with PRPL pattern\n- Minimise main thread work:\n  - Evaluate the script (debounce input handlers, use web workers)\n  - Check style layout (reduce complexity of style calculations, avoid large, complex layouts).\n  - Rendering (manage layer count, simplify paint complexity, and reduce paint areas)\n  - Parse HTML and CSS (extract critical CSS, minify CSS, defer non-critical CSS)\n- Reduce resource counts and transfer sizes (CSS & JavaScript, Images, Fonts, Documents, Media)\n- Minify JavaScript\n- Improve page loading speed:\n  - Using Preconnect to required origins\n  - Preload key requests\n- Minimise critical request depth:\n  - Minimise number of critical resources (eliminate them, defer their download, etc)\n  - Optimize the number of critical bytes and reduce the download time\n  - Optimize the order for the remaining resources to be loaded (download all critical assets early\n    to shorten critical path length)\n\n## Mobile App\n\nFor the mobile app, here are the problems/recommendations I have identified from the report:\n\n- Properly size images (add explicit width & height for images)\n- Work on reducing network payloads\n- Serve static assets with efficient cache policy\n- Optimise the Largest Contentful Paint (make it faster):\n  - Eliminate resource load delay\n  - Eliminate element render delay\n  - Reduce resource load time\n  - Reduce time to first byte\n- Improve mobile friendliness (appropriately size tap targets)\n- Reduce the impact of third-party code (identify slow third-party JavaScript)\n- Reduce JavaScript execution time:\n  - Remove unused code\n  - Minify and compress code\n  - Implement code splitting\n  - Cache code with PRPL pattern\n- Minimise main thread work:\n  - Evaluate the script (debounce input handlers, use web workers)\n  - Check style layout (reduce complexity of style calculations, avoid large, complex layouts).\n  - Rendering (manage layer count, simplify paint complexity, and reduce paint areas)\n  - Parse HTML and CSS (extract critical CSS, minify CSS, defer non-critical CSS)\n- Reduce resource counts and transfer sizes (CSS & JavaScript, Images, Fonts, Documents, Media)\n- Minify JavaScript\n- Improve page loading speed:\n  - Using Preconnect to required origins\n  - Preload key requests\n- Minimise critical request depth:\n  - Minimise number of critical resources (eliminate them, defer their download, etc)\n  - Optimize the number of critical bytes and reduce the download time\n  - Optimize the order for the remaining resources to be loaded (download all critical assets early\n    to shorten critical path length)\n- Shorten main-thread tasks\n- Check and use discernible name for links\n- Add meta description to document\n\nI have added cards and allocated story points for each of these problems and recommendations into\nthe Trello board under the ‘Lighthouse Project Implementation’ section.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"desktop-app","text":"Desktop App"},{"depth":2,"slug":"mobile-app","text":"Mobile App"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
