import { f as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_c5329516.mjs';
import 'clsx';

const html = "<h2 id=\"provide-password-management-for-ldap-and-database-implementations\">Provide password management for LDAP and database implementations</h2>\n<p>As a user, I want to be able to easily access and check my password, and change it when I need, so I\ncan avoid my information being leaked.</p>\n<p>As a product owner, I want to have my user’s passwords stored in a secure way, so that they can\navoid data breaches and unnecessary legal consequences.</p>\n<p>As a product owner, I want to have a database that is easy and low costing to maintenance, easy to\nbe consistent with future add-ons, so that can save my efforts.</p>\n<h2 id=\"add-ldap-server-option\">Add LDAP Server Option</h2>\n<p>As a product owner, I want an in-house authentication solution developed that meets all our\nauthentication needs, so that we do not have to rely on third-party authentication solutions within\nthe OnTrack architecture.</p>\n<p>As a user, I want to be assured that the authentication solution is secure, so that my passwords and\nother information is not publicly disclosed.</p>\n<p>As a user, I want the authentication solution to be reliable and respond swiftly, so that I can\naccess my account as needed and on-demand.</p>\n<h2 id=\"extend-api-with-user-management\">Extend API with user management</h2>\n<p>As a user, I want to be able to reset my Ontrack password myself, so I do not need to contact a\nsystem administrator.</p>\n<p>As a system administrator, I want users to be able to reset their passwords without my input. I also\nwant the ability to send a password reset request to users. This will save me time and increase\nsecurity by allowing insecure/exposed passwords to be easily changed.</p>\n<h2 id=\"thoth-tech-ontrack-deployment-to-google-cloud\">Thoth Tech Ontrack deployment to Google Cloud</h2>\n<p>As a product owner, I want to have more freedom in OnTrack development of the company’s evolving\nvision separated from the Deakin version.</p>\n<p>As a student/admin, I want to access the OnTrack via the URL from anywhere and should be able to\nperform all actions those are performed by students on Deakin version of track.</p>\n<p>As a product owner, I want separation of roles as available in Deakin version of OnTrack.</p>\n<p>As a product owner, I want an email sent every time there is a successful build sent to production</p>\n<h2 id=\"ontrack-pipeline-cicd\">Ontrack Pipeline CI/CD</h2>\n<p>As a system admin, I want to have OnTrack built and deployed automatically with minimal user\nintervention in the process, so that the latest version is available. All the building processes\nshould be automated so all I must do is initiate the building.</p>\n<p>As a user, I want to access an up-to-date version of OnTrack hosted on GCP (Google Cloud Platform)\nso that I will not have to wait for the service to be manually updated.</p>\n<p>As a developer, I want the pipeline to be as simple and maintainable as possible so that it can\neasily be updated to support future versions of OnTrack. Different versions should be obvious and\nlabelled appropriately.</p>\n<p>As a developer, I want a generic deployment pipeline that can be simply changed out in the future,\nso that deployment targets for different services can be used. This should be done with\nenvironmental variables.</p>";

				const frontmatter = {"title":"User Stories"};
				const file = "C:/Users/Danma/OneDrive/Desktop/Deakin-Work/Github Work/Capstone-Documentation-Website-Template/src/content/docs/products/ontrack/documentation/deployment/User Stories.md";
				const url = undefined;
				function rawContent() {
					return "\n## Provide password management for LDAP and database implementations\n\nAs a user, I want to be able to easily access and check my password, and change it when I need, so I\ncan avoid my information being leaked.\n\nAs a product owner, I want to have my user&#39;s passwords stored in a secure way, so that they can\navoid data breaches and unnecessary legal consequences.\n\nAs a product owner, I want to have a database that is easy and low costing to maintenance, easy to\nbe consistent with future add-ons, so that can save my efforts.\n\n## Add LDAP Server Option\n\nAs a product owner, I want an in-house authentication solution developed that meets all our\nauthentication needs, so that we do not have to rely on third-party authentication solutions within\nthe OnTrack architecture.\n\nAs a user, I want to be assured that the authentication solution is secure, so that my passwords and\nother information is not publicly disclosed.\n\nAs a user, I want the authentication solution to be reliable and respond swiftly, so that I can\naccess my account as needed and on-demand.\n\n## Extend API with user management\n\nAs a user, I want to be able to reset my Ontrack password myself, so I do not need to contact a\nsystem administrator.\n\nAs a system administrator, I want users to be able to reset their passwords without my input. I also\nwant the ability to send a password reset request to users. This will save me time and increase\nsecurity by allowing insecure/exposed passwords to be easily changed.\n\n## Thoth Tech Ontrack deployment to Google Cloud\n\nAs a product owner, I want to have more freedom in OnTrack development of the company&#39;s evolving\nvision separated from the Deakin version.\n\nAs a student/admin, I want to access the OnTrack via the URL from anywhere and should be able to\nperform all actions those are performed by students on Deakin version of track.\n\nAs a product owner, I want separation of roles as available in Deakin version of OnTrack.\n\nAs a product owner, I want an email sent every time there is a successful build sent to production\n\n## Ontrack Pipeline CI/CD\n\nAs a system admin, I want to have OnTrack built and deployed automatically with minimal user\nintervention in the process, so that the latest version is available. All the building processes\nshould be automated so all I must do is initiate the building.\n\nAs a user, I want to access an up-to-date version of OnTrack hosted on GCP (Google Cloud Platform)\nso that I will not have to wait for the service to be manually updated.\n\nAs a developer, I want the pipeline to be as simple and maintainable as possible so that it can\neasily be updated to support future versions of OnTrack. Different versions should be obvious and\nlabelled appropriately.\n\nAs a developer, I want a generic deployment pipeline that can be simply changed out in the future,\nso that deployment targets for different services can be used. This should be done with\nenvironmental variables.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"provide-password-management-for-ldap-and-database-implementations","text":"Provide password management for LDAP and database implementations"},{"depth":2,"slug":"add-ldap-server-option","text":"Add LDAP Server Option"},{"depth":2,"slug":"extend-api-with-user-management","text":"Extend API with user management"},{"depth":2,"slug":"thoth-tech-ontrack-deployment-to-google-cloud","text":"Thoth Tech Ontrack deployment to Google Cloud"},{"depth":2,"slug":"ontrack-pipeline-cicd","text":"Ontrack Pipeline CI/CD"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
