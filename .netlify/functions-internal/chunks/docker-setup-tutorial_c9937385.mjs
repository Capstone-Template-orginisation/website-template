import { f as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_c5329516.mjs';
import 'clsx';

const html = "<h2 id=\"install-git-windows\">Install Git (Windows)</h2>\n<p><a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></p>\n<hr>\n<h2 id=\"install-docker-desktop\">Install Docker Desktop</h2>\n<p><a href=\"https://www.docker.com/products/docker-desktop/\">https://www.docker.com/products/docker-desktop/</a></p>\n<ol>\n<li>\n<p>Fork <strong>doubtfire-deploy</strong></p><div></div>, <strong>doubtfire-api<div></div></strong>, and\n<strong>doubtfire-web<div></div></strong> from <a href=\"https://github.com/doubtfire-lms\">https://github.com/doubtfire-lms</a><p></p>\n</li>\n<li>\n<p>Clone your doubtfire-deploy. Make sure to fetch submodules to get the subprojects.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.0epgx.css\"><script type=\"module\" src=\"/_astro/ec.sgewm.js\"></script><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#D6DEEB;--1:#403F53\">git clone -b development --recurse-submodules https://github.com/[your_github_username]/doubtfire-deploy</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git clone -b development --recurse-submodules https://github.com/[your_github_username]/doubtfire-deploy\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Change directory to doubtfire-deploy by using: cd doubtfire-deploy. Open a Terminal that supports\nsh scripts (on Windows, you will need WSL, Msys2, or Cygwin). Run the following command to set\nyour fork as the remote.</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#D6DEEB;--1:#403F53\">bash ./change_remotes.sh</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"bash ./change_remotes.sh\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Change into the development directory and use Docker Compose to setup the database.</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#D6DEEB;--1:#403F53\">cd development</span></div><div class=\"ec-line\"><span style=\"--0:#D6DEEB;--1:#403F53\">docker compose up -d</span></div><div class=\"ec-line\"><span style=\"--0:#D6DEEB;--1:#403F53\">docker compose run --rm doubtfire-api bash -c \"bundle exec rails db:environment:set RAILS_ENV=development &#x26;&#x26; bundle exec rake db:populate\"</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"cd developmentdocker compose up -ddocker compose run --rm doubtfire-api bash -c &#x22;bundle exec rails db:environment:set RAILS_ENV=development &#x26;&#x26; bundle exec rake db:populate&#x22;\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Change into the development directory and use Docker Compose to setup the database. Run in the\ndevelopment folder</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#D6DEEB;--1:#403F53\">docker compose up -d</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"docker compose up -d\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Open a web browser and navigate to: <a href=\"http://localhost:4200\">http://localhost:4200</a></p>\n</li>\n</ol>";

				const frontmatter = {"title":"Docker Setup Tutorial"};
				const file = "C:/Users/Danma/OneDrive/Desktop/Deakin-Work/Github Work/Capstone-Documentation-Website-Template/src/content/docs/products/ontrack/documentation/front-end-migration/deploy-ontrack-using-docker/docker-setup-tutorial.md";
				const url = undefined;
				function rawContent() {
					return "\n## Install Git (Windows)\n\n<https://git-scm.com/download/win>\n\n---\n\n## Install Docker Desktop\n\n<https://www.docker.com/products/docker-desktop/>\n\n1. Fork **doubtfire-deploy:development**, **doubtfire-api:development**, and\n   **doubtfire-web:development** from <https://github.com/doubtfire-lms>\n2. Clone your doubtfire-deploy. Make sure to fetch submodules to get the subprojects.\n\n   ```console\n   git clone -b development --recurse-submodules https://github.com/[your_github_username]/doubtfire-deploy\n   ```\n\n3. Change directory to doubtfire-deploy by using: cd doubtfire-deploy. Open a Terminal that supports\n   sh scripts (on Windows, you will need WSL, Msys2, or Cygwin). Run the following command to set\n   your fork as the remote.\n\n   ```console\n   bash ./change_remotes.sh\n   ```\n\n4. Change into the development directory and use Docker Compose to setup the database.\n\n   ```console\n   cd development\n   docker compose up -d\n   docker compose run --rm doubtfire-api bash -c \"bundle exec rails db:environment:set RAILS_ENV=development && bundle exec rake db:populate\"\n   ```\n\n5. Change into the development directory and use Docker Compose to setup the database. Run in the\n   development folder\n\n   ```console\n   docker compose up -d\n   ```\n\n6. Open a web browser and navigate to: <http://localhost:4200>\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"install-git-windows","text":"Install Git (Windows)"},{"depth":2,"slug":"install-docker-desktop","text":"Install Docker Desktop"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
