import { f as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_c5329516.mjs';
import 'clsx';

const html = "<p><a href=\"#contributing-to-repositories-how-to\">Contributing to Repositories: How To</a></p>\n<p><a href=\"#branching-guidelines\">Branching Guidelines</a></p>\n<p><a href=\"#commit-guidelines\">Commit Guidelines</a></p>\n<ul>\n<li><a href=\"#message-format\">Message format</a></li>\n</ul>\n<p><a href=\"#code-review-guidelines\">Code Review Guidelines</a></p>\n<p><a href=\"#git-workflow-summary\">Git Workflow Summary</a></p>\n<h2 id=\"contributing-to-repositories-how-to\">Contributing to Repositories: How To</h2>\n<p>Repositories are where existing Thoth Tech code is stored, and where new code contributions, once\ntested and approved, will ultimately be merged.</p>\n<p>In order to begin new work on your project, you will need to clone a local copy of the relevant\nThoth Tech repository.</p>\n<p>Steps:</p>\n<h3 id=\"if-you-have-never-worked-on-the-repository-before\">If you have never worked on the repository before</h3>\n<ul>\n<li>Clone your project’s relevant Thoth Tech repository to your local machine and navigate to the\ncreated project folder; you will find yourself on the default branch (main/master).</li>\n</ul>\n<h3 id=\"if-you-already-have-a-copy-of-this-repository-on-your-local-machine\">If you already have a copy of this repository on your local machine</h3>\n<ul>\n<li>From the main/master branch of your local copy of the repository, make sure to do a git “pull” to\nmake sure you are working on the latest copy of code from the origin (this will include any\nchanges merged to the main branch since you last cloned/pulled the repo).</li>\n</ul>\n<p><em>Then:</em></p>\n<ul>\n<li>Create a new branch (as per <a href=\"#branching-guidelines\">Branching Guide</a>) for your changes</li>\n<li>Make your code changes on the branch you created</li>\n<li>When complete, commit your changes, using the format provided in the\n<a href=\"#commit-guidelines\">commit guidelines</a>.</li>\n<li>Push the branch to origin</li>\n<li>Create a <a href=\"#draft-pull-request\">draft Pull Request</a> (PR) for merging the branch into the main Thoth\nTech branch for your repository, adding <a href=\"#required-approvals\">required approvals</a> (note: it will\nbe blocked from merging while in draft form). Comment on the progress and any feedback sought.</li>\n<li>Continue making changes on your local branch, committing and pushing your changes, until you are\nsatisfied the code is complete, passing all tests and relevant acceptance criteria, and ready for\nmerging</li>\n<li>Publish your Pull request by changing the status to ready for review</li>\n</ul>\n<p>An example sequence of git commands used in this process is provided in the\n<a href=\"#git-workflow-summary\">Git Workflow Summary</a>.</p>\n<h2 id=\"branching-guidelines\">Branching Guidelines</h2>\n<p>No commits should be made directly to the default branch (usually main/master/develop). Instead,\nbranches should be created off the default branch to encompass any changes.</p>\n<p>Branches must have descriptive names, including a reference the task/subtask number the work relates\nto, using the following format:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Branch naming format</th><th>Use</th></tr></thead><tbody><tr><td><code dir=\"auto\">feature/&#x3C;project_task or subtask number_description></code></td><td>New product feature/function</td></tr><tr><td><code dir=\"auto\">fix/&#x3C;project_task or subtask number_description></code></td><td>For a fix</td></tr><tr><td><code dir=\"auto\">doc/&#x3C;project_task or subtask number_description></code></td><td>Non-feature-related document additions/changes</td></tr></tbody></table>\n<p>For an example, let’s assume the following hypothetical task breakdown for the Voice Verification\nproject (we might expect these numbers to be reflected in a Trello task cards):</p>\n<p>Product/Epic:</p>\n<h3 id=\"voice-verification\">Voice Verification</h3>\n<p><em>Tasks:</em></p>\n<ol>\n<li>\n<p><em>Voice Registration</em></p>\n<p>1.1. <em>Receive Voice Input</em></p>\n<p>1.2. <em>Store Voice Input</em></p>\n</li>\n<li>\n<p><em>Voice Matching</em></p>\n</li>\n<li>\n<p><em>&#x3C;task></em></p>\n<p>3.1 <em>&#x3C;subtask></em></p>\n</li>\n</ol>\n<p>A programmer who is going to commence work on the Voice Verification component subtask 1.2 should\nuse a branch named: <em>feature/voice-verification-1.2-store-voice-input</em></p>\n<p>This would be created and checked out by using the git command:</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.0epgx.css\"><script type=\"module\" src=\"/_astro/ec.sgewm.js\"></script><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">checkout</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">-b</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">feature/voice-verification-1.2-store-voice-input</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git checkout -b feature/voice-verification-1.2-store-voice-input\"><div></div></button></div></figure></div>\n<h2 id=\"commit-guidelines\">Commit Guidelines</h2>\n<p>Thoth Tech follows the same Git commit message format as required by the Doubtfire LMS (source\ndoubtfire-lms’s\n<a href=\"https://github.com/doubtfire-lms/doubtfire-deploy/blob/development/CONTRIBUTING.md#commit-message-format\">CONTRIBUTING.md</a>)\nwhich this section predominantly mirrors. This format makes for an easier to read and more useful\ncommit history.</p>\n<h3 id=\"message-format\">Message Format</h3>\n<p>Each commit message consists of a header, a body, and a footer.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x3C;header></span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x3C;BLANK LINE></span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x3C;body></span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x3C;BLANK LINE></span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x3C;footer></span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<header><BLANK LINE><body><BLANK LINE><footer>\"><div></div></button></div></figure></div>\n<p>The <strong>header</strong> is mandatory and must conform to the Commit Message Header format.</p>\n<p>The <strong>body</strong> is recommended for all commits. When the body is present, it must be at least 20\ncharacters long and conform to the Commit Message Body format.</p>\n<p>The <strong>footer</strong> is optional. The Commit Message Footer format describes the purpose and structure of\nthe footer.</p>\n<p>Any line of the commit message should be 100 characters or fewer.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">Commit Message Header</span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x3C;type>(&#x3C;scope>): &#x3C;short summary></span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">  │       │             │</span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.</span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">  │       │</span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">  │       └─⫸ Commit Scope (optional): animations|common|style|forms|http|router|service-worker|</span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">  │                                     upgrade|changelog|dev-infra|docs-infra|migrations|</span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">  │</span></div><div class=\"ec-line\"><span style=\"--0:#d6deeb;--1:#403f53\">  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Commit Message Header<type>(<scope>): <short summary>  │       │             │  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.  │       │  │       └─⫸ Commit Scope (optional): animations|common|style|forms|http|router|service-worker|  │                                     upgrade|changelog|dev-infra|docs-infra|migrations|  │  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test\"><div></div></button></div></figure></div>\n<p>The <code dir=\"auto\">&#x3C;type></code> and <code dir=\"auto\">&#x3C;summary></code> fields are mandatory, the (<code dir=\"auto\">&#x3C;scope></code>) field is optional.</p>\n<p>The <code dir=\"auto\">&#x3C;type></code> must be one of the following:</p>\n<ul>\n<li><strong>build</strong> : Changes that affect the build system or external dependencies (example scopes: gulp,\nbroccoli, npm)</li>\n<li><strong>ci</strong> : Changes to our CI configuration files and scripts (example scopes: Circle, BrowserStack,\nSauceLabs)</li>\n<li><strong>docs</strong> : Documentation only changes</li>\n<li><strong>feat</strong> : A new feature</li>\n<li><strong>fix</strong> : A bug fix</li>\n<li><strong>perf</strong> : A code change that improves performance</li>\n<li><strong>refactor</strong> : A code change that neither fixes a bug nor adds a feature</li>\n<li><strong>test</strong> : Adding missing tests or correcting existing tests</li>\n</ul>\n<p>Doubtfire-LMS recommends Chris Beam’s post on\n<a href=\"http://chris.beams.io/posts/git-commit/\">How to Write Good Commit Messages</a> to improve your commit\nmessage writing.</p>\n<p>Use the imperative mood in your commit subject line</p>\n<p>Write your commits in the imperative mood and not the indicative mood</p>\n<ul>\n<li>“Fix a bug” and <strong>not</strong> “Fix<em>ed</em> a bug”</li>\n<li>“Change the behaviour of Y” and <strong>not</strong> ”<em>Changed</em> the behaviour of Y”</li>\n<li>“Add new API methods” and <strong>not</strong> “Sweet new API methods”</li>\n</ul>\n<p>Keep the subject line (top line) concise; keep it <strong>within 50 characters</strong>.</p>\n<p>Use the body (lines after the top line) to explain why and what and <em>not</em> how; keep it <strong>within 72\ncharacters</strong>.</p>\n<h3 id=\"but-how-can-i-write-new-lines-if-im-using-git-commit--m-message\">But how can I write new lines if I’m using <code dir=\"auto\">git commit -m \"Message\"</code>?</h3>\n<p>Don’t use the <code dir=\"auto\">-m</code> switch. Use a text editor to write your commit message instead.</p>\n<p>If you are using the command line to write your commits, it is useful to set your git editor to make\nwriting a commit body easier. You can use the following command to set your editor to Visual Studio\nCode, <code dir=\"auto\">nano</code>, <code dir=\"auto\">emacs</code>, <code dir=\"auto\">vim</code>, <code dir=\"auto\">atom</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">config</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">--global</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">core.editor</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#984E4D\">code --wait</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">config</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">--global</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">core.editor</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">nano</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">config</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">--global</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">core.editor</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">emacs</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">config</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">--global</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">core.editor</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">vim</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">config</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">--global</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">core.editor</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#984E4D\">atom --wait</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git config --global core.editor &#x22;code --wait&#x22;git config --global core.editor nanogit config --global core.editor emacsgit config --global core.editor vimgit config --global core.editor &#x22;atom --wait&#x22;\"><div></div></button></div></figure></div>\n<h2 id=\"code-review-guidelines\">Code Review Guidelines</h2>\n<p>You are strongly encouraged to get your code reviewed by a reviewer as soon as there is any code to\nreview, to get a second opinion on the chosen solution and implementation, and an extra pair of eyes\nlooking for bugs, logic problems, or uncovered edge cases.</p>\n<h3 id=\"draft-pull-request\">Draft Pull Request</h3>\n<p>Draft Pull Requests allow a work in progress to receive early feedback. The developer creating the\nPR should, in the description, indicate their progress and any particular aspect they are looking\nfor feedback on. When the PR is ready for final review, the developer should update the description,\nre-request reviews as required and change the status to “ready to review”.</p>\n<p>Pull requests (draft and otherwise) are created from the GitHub website. Further information about\ndraft pull requests, how to make them, and how to convert their status to ready for merging can be\nfound on GitHub’s\n<a href=\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\">Introducing Draft Pull Requests</a>\nblog.</p>\n<h3 id=\"required-approvals\">Required Approvals</h3>\n<p>Pull requests require <strong>a minimum of two approvals</strong>. The default approach is to choose a reviewer\nfrom your team for the first review. However, the reviewer may be from different team, for example a\ndomain expert in a programming language, quality assurance process, telemetry or documentation.\nDepending on the team size and dynamics, the number of required approvals can be higher or lower.\nThink about the tradeoffs between velocity with quality when deciding on an approval process for\nyour team.</p>\n<p>The required approvals rules can be set via the\n<a href=\"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule\">branch protection rule</a>.\nAll the leads should have access to change these settings and should ensure this is configured when\ncreating a new GitHub repository. For more information on how to set this up correctly, see this\n<a href=\"https://github.com/thoth-tech/handbook/blob/main/docs/learning/useful-resources/setup-new-github-repository.md\">guide</a>.</p>\n<h2 id=\"git-workflow-summary\">Git Workflow Summary</h2>\n<h3 id=\"start-a-new-piece-of-work\">Start a new piece of work</h3>\n<ol>\n<li>\n<p>Synch repo and set up for your new feature branch (remember to use Thoth Tech\n<a href=\"#branching-guidelines\">branching guidelines</a> for naming the new branch; we have used the\nguideline example of <em>feature/voice-verification-1.2-store-voice-input</em> for our workflow\nillustration):</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">checkout</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">main</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">pull</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">main</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">checkout</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">-b</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">feature/voice-verification-1.2-store-voice-input</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git checkout maingit pull maingit checkout -b feature/voice-verification-1.2-store-voice-input\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Make changes, commit (using comments format that follows <a href=\"#commit-guidelines\">commit guidelines</a>)\nand push to origin:</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">add</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">.</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">commit</span></div><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">push</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">-u</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">origin</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">feature/voice-verification-1.2-store-voice-input</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git add .git commitgit push -u origin feature/voice-verification-1.2-store-voice-input\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Remember to submit a <a href=\"#draft-pull-request\">draft pull request</a> via GitHub to allow for code\nreview (and mark as ready to submit when ready to merge your changes to main).</p>\n</li>\n</ol>\n<h3 id=\"continue-a-piece-of-work\">Continue a piece of work</h3>\n<ol>\n<li>\n<p>If the branch has already been created in the remote repository.</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">checkout</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">feature/voice-verification-1.2-store-voice-input</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git checkout feature/voice-verification-1.2-store-voice-input\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Pull in any new code from the default branch</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">pull</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">origin</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">main</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git pull origin main\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Resolve any merge conflicts that may now be revealed.</p>\n</li>\n<li>\n<p>Continue to Step 2 in <a href=\"#start-a-new-piece-of-work\">Start a new piece of work</a> flow</p>\n</li>\n</ol>\n<h3 id=\"collaborate-on-an-existing-branch\">Collaborate on an existing branch</h3>\n<p>Ideally, we should avoid having developers working on the same code. It creates merge conflicts and\nhinders efficiency. If possible, try to break it down into small tasks so developers can work\nindependently. In the worst-case scenario, if there is more than 1 person working on a feature\nbranch:</p>\n<ol>\n<li>\n<p>Please make sure you pull changes in the remote branch before starting your work.</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><span style=\"--0:#82AAFF;--1:#3B61B0\">git</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">pull</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">origin</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3B61B0\">feature/voice-verification-1.2-store-voice-input</span></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"git pull origin feature/voice-verification-1.2-store-voice-input\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p>Resolve any merge conflicts that may now be revealed.</p>\n</li>\n<li>\n<p>Continue to Step 2 in <a href=\"#start-a-new-piece-of-work\">Start a new piece of work</a> flow</p>\n</li>\n</ol>\n<p><strong>Please avoid force-push and rebase when working on a shared branch</strong>. It can cause complex and\nhard to resolve merge conflicts as well as undo others’ commits accidentally.</p>";

				const frontmatter = {"title":"Git Contribution Guide","sidebar":{"label":"Git Contribution Guide"}};
				const file = "C:/Users/Danma/OneDrive/Desktop/Deakin-Work/Github Work/Capstone-Documentation-Website-Template/src/content/docs/processes/quality-assurance/git-contributions-guide.md";
				const url = undefined;
				function rawContent() {
					return "\n[Contributing to Repositories: How To](#contributing-to-repositories-how-to)\n\n[Branching Guidelines](#branching-guidelines)\n\n[Commit Guidelines](#commit-guidelines)\n\n- [Message format](#message-format)\n\n[Code Review Guidelines](#code-review-guidelines)\n\n[Git Workflow Summary](#git-workflow-summary)\n\n## Contributing to Repositories: How To\n\nRepositories are where existing Thoth Tech code is stored, and where new code contributions, once\ntested and approved, will ultimately be merged.\n\nIn order to begin new work on your project, you will need to clone a local copy of the relevant\nThoth Tech repository.\n\nSteps:\n\n### If you have never worked on the repository before\n\n- Clone your project's relevant Thoth Tech repository to your local machine and navigate to the\n  created project folder; you will find yourself on the default branch (main/master).\n\n### If you already have a copy of this repository on your local machine\n\n- From the main/master branch of your local copy of the repository, make sure to do a git \"pull\" to\n  make sure you are working on the latest copy of code from the origin (this will include any\n  changes merged to the main branch since you last cloned/pulled the repo).\n\n_Then:_\n\n- Create a new branch (as per [Branching Guide](#branching-guidelines)) for your changes\n- Make your code changes on the branch you created\n- When complete, commit your changes, using the format provided in the\n  [commit guidelines](#commit-guidelines).\n- Push the branch to origin\n- Create a [draft Pull Request](#draft-pull-request) (PR) for merging the branch into the main Thoth\n  Tech branch for your repository, adding [required approvals](#required-approvals) (note: it will\n  be blocked from merging while in draft form). Comment on the progress and any feedback sought.\n- Continue making changes on your local branch, committing and pushing your changes, until you are\n  satisfied the code is complete, passing all tests and relevant acceptance criteria, and ready for\n  merging\n- Publish your Pull request by changing the status to ready for review\n\nAn example sequence of git commands used in this process is provided in the\n[Git Workflow Summary](#git-workflow-summary).\n\n## Branching Guidelines\n\nNo commits should be made directly to the default branch (usually main/master/develop). Instead,\nbranches should be created off the default branch to encompass any changes.\n\nBranches must have descriptive names, including a reference the task/subtask number the work relates\nto, using the following format:\n\n| Branch naming format                                   | Use                                            |\n| ------------------------------------------------------ | ---------------------------------------------- |\n| `feature/<project_task or subtask number_description>` | New product feature/function                   |\n| `fix/<project_task or subtask number_description>`     | For a fix                                      |\n| `doc/<project_task or subtask number_description>`     | Non-feature-related document additions/changes |\n\nFor an example, let's assume the following hypothetical task breakdown for the Voice Verification\nproject (we might expect these numbers to be reflected in a Trello task cards):\n\nProduct/Epic:\n\n### Voice Verification\n\n_Tasks:_\n\n1. _Voice Registration_\n\n   1.1. _Receive Voice Input_\n\n   1.2. _Store Voice Input_\n\n2. _Voice Matching_\n3. _\\<task\\>_\n\n   3.1 _\\<subtask\\>_\n\nA programmer who is going to commence work on the Voice Verification component subtask 1.2 should\nuse a branch named: _feature/voice-verification-1.2-store-voice-input_\n\nThis would be created and checked out by using the git command:\n\n```shell\ngit checkout -b feature/voice-verification-1.2-store-voice-input\n```\n\n## Commit Guidelines\n\nThoth Tech follows the same Git commit message format as required by the Doubtfire LMS (source\ndoubtfire-lms's\n[CONTRIBUTING.md](https://github.com/doubtfire-lms/doubtfire-deploy/blob/development/CONTRIBUTING.md#commit-message-format))\nwhich this section predominantly mirrors. This format makes for an easier to read and more useful\ncommit history.\n\n### Message Format\n\nEach commit message consists of a header, a body, and a footer.\n\n```plaintext\n<header>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\nThe **header** is mandatory and must conform to the Commit Message Header format.\n\nThe **body** is recommended for all commits. When the body is present, it must be at least 20\ncharacters long and conform to the Commit Message Body format.\n\nThe **footer** is optional. The Commit Message Footer format describes the purpose and structure of\nthe footer.\n\nAny line of the commit message should be 100 characters or fewer.\n\n```plaintext\nCommit Message Header\n<type>(<scope>): <short summary>\n  │       │             │\n  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.\n  │       │\n  │       └─⫸ Commit Scope (optional): animations|common|style|forms|http|router|service-worker|\n  │                                     upgrade|changelog|dev-infra|docs-infra|migrations|\n  │\n  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test\n```\n\nThe `<type>` and `<summary>` fields are mandatory, the (`<scope>`) field is optional.\n\nThe `<type>` must be one of the following:\n\n- **build** : Changes that affect the build system or external dependencies (example scopes: gulp,\n  broccoli, npm)\n- **ci** : Changes to our CI configuration files and scripts (example scopes: Circle, BrowserStack,\n  SauceLabs)\n- **docs** : Documentation only changes\n- **feat** : A new feature\n- **fix** : A bug fix\n- **perf** : A code change that improves performance\n- **refactor** : A code change that neither fixes a bug nor adds a feature\n- **test** : Adding missing tests or correcting existing tests\n\nDoubtfire-LMS recommends Chris Beam's post on\n[How to Write Good Commit Messages](http://chris.beams.io/posts/git-commit/) to improve your commit\nmessage writing.\n\nUse the imperative mood in your commit subject line\n\nWrite your commits in the imperative mood and not the indicative mood\n\n- \"Fix a bug\" and **not** \"Fix*ed* a bug\"\n- \"Change the behaviour of Y\" and **not** \"_Changed_ the behaviour of Y\"\n- \"Add new API methods\" and **not** \"Sweet new API methods\"\n\nKeep the subject line (top line) concise; keep it **within 50 characters**.\n\nUse the body (lines after the top line) to explain why and what and _not_ how; keep it **within 72\ncharacters**.\n\n### But how can I write new lines if I'm using `git commit -m \"Message\"`?\n\nDon't use the `-m` switch. Use a text editor to write your commit message instead.\n\nIf you are using the command line to write your commits, it is useful to set your git editor to make\nwriting a commit body easier. You can use the following command to set your editor to Visual Studio\nCode, `nano`, `emacs`, `vim`, `atom`.\n\n```shell\ngit config --global core.editor \"code --wait\"\ngit config --global core.editor nano\ngit config --global core.editor emacs\ngit config --global core.editor vim\ngit config --global core.editor \"atom --wait\"\n```\n\n## Code Review Guidelines\n\nYou are strongly encouraged to get your code reviewed by a reviewer as soon as there is any code to\nreview, to get a second opinion on the chosen solution and implementation, and an extra pair of eyes\nlooking for bugs, logic problems, or uncovered edge cases.\n\n### Draft Pull Request\n\nDraft Pull Requests allow a work in progress to receive early feedback. The developer creating the\nPR should, in the description, indicate their progress and any particular aspect they are looking\nfor feedback on. When the PR is ready for final review, the developer should update the description,\nre-request reviews as required and change the status to \"ready to review\".\n\nPull requests (draft and otherwise) are created from the GitHub website. Further information about\ndraft pull requests, how to make them, and how to convert their status to ready for merging can be\nfound on GitHub's\n[Introducing Draft Pull Requests](https://github.blog/2019-02-14-introducing-draft-pull-requests/)\nblog.\n\n### Required Approvals\n\nPull requests require **a minimum of two approvals**. The default approach is to choose a reviewer\nfrom your team for the first review. However, the reviewer may be from different team, for example a\ndomain expert in a programming language, quality assurance process, telemetry or documentation.\nDepending on the team size and dynamics, the number of required approvals can be higher or lower.\nThink about the tradeoffs between velocity with quality when deciding on an approval process for\nyour team.\n\nThe required approvals rules can be set via the\n[branch protection rule](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule).\nAll the leads should have access to change these settings and should ensure this is configured when\ncreating a new GitHub repository. For more information on how to set this up correctly, see this\n[guide](https://github.com/thoth-tech/handbook/blob/main/docs/learning/useful-resources/setup-new-github-repository.md).\n\n## Git Workflow Summary\n\n### Start a new piece of work\n\n1. Synch repo and set up for your new feature branch (remember to use Thoth Tech\n   [branching guidelines](#branching-guidelines) for naming the new branch; we have used the\n   guideline example of _feature/voice-verification-1.2-store-voice-input_ for our workflow\n   illustration):\n\n   ```shell\n   git checkout main\n   git pull main\n   git checkout -b feature/voice-verification-1.2-store-voice-input\n   ```\n\n2. Make changes, commit (using comments format that follows [commit guidelines](#commit-guidelines))\n   and push to origin:\n\n   ```shell\n   git add .\n   git commit\n   git push -u origin feature/voice-verification-1.2-store-voice-input\n   ```\n\n3. Remember to submit a [draft pull request](#draft-pull-request) via GitHub to allow for code\n   review (and mark as ready to submit when ready to merge your changes to main).\n\n### Continue a piece of work\n\n1. If the branch has already been created in the remote repository.\n\n   ```shell\n   git checkout feature/voice-verification-1.2-store-voice-input\n   ```\n\n2. Pull in any new code from the default branch\n\n   ```shell\n   git pull origin main\n   ```\n\n3. Resolve any merge conflicts that may now be revealed.\n\n4. Continue to Step 2 in [Start a new piece of work](#start-a-new-piece-of-work) flow\n\n### Collaborate on an existing branch\n\nIdeally, we should avoid having developers working on the same code. It creates merge conflicts and\nhinders efficiency. If possible, try to break it down into small tasks so developers can work\nindependently. In the worst-case scenario, if there is more than 1 person working on a feature\nbranch:\n\n1. Please make sure you pull changes in the remote branch before starting your work.\n\n   ```shell\n   git pull origin feature/voice-verification-1.2-store-voice-input\n   ```\n\n2. Resolve any merge conflicts that may now be revealed.\n3. Continue to Step 2 in [Start a new piece of work](#start-a-new-piece-of-work) flow\n\n**Please avoid force-push and rebase when working on a shared branch**. It can cause complex and\nhard to resolve merge conflicts as well as undo others' commits accidentally.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"contributing-to-repositories-how-to","text":"Contributing to Repositories: How To"},{"depth":3,"slug":"if-you-have-never-worked-on-the-repository-before","text":"If you have never worked on the repository before"},{"depth":3,"slug":"if-you-already-have-a-copy-of-this-repository-on-your-local-machine","text":"If you already have a copy of this repository on your local machine"},{"depth":2,"slug":"branching-guidelines","text":"Branching Guidelines"},{"depth":3,"slug":"voice-verification","text":"Voice Verification"},{"depth":2,"slug":"commit-guidelines","text":"Commit Guidelines"},{"depth":3,"slug":"message-format","text":"Message Format"},{"depth":3,"slug":"but-how-can-i-write-new-lines-if-im-using-git-commit--m-message","text":"But how can I write new lines if I’m using git commit -m \"Message\"?"},{"depth":2,"slug":"code-review-guidelines","text":"Code Review Guidelines"},{"depth":3,"slug":"draft-pull-request","text":"Draft Pull Request"},{"depth":3,"slug":"required-approvals","text":"Required Approvals"},{"depth":2,"slug":"git-workflow-summary","text":"Git Workflow Summary"},{"depth":3,"slug":"start-a-new-piece-of-work","text":"Start a new piece of work"},{"depth":3,"slug":"continue-a-piece-of-work","text":"Continue a piece of work"},{"depth":3,"slug":"collaborate-on-an-existing-branch","text":"Collaborate on an existing branch"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
